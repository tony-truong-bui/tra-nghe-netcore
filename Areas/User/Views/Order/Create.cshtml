@model TraNgheCore.Models.MultiOrderCreateViewModel
@using TraNgheCore.Areas.User.Models;

@{
    ViewBag.Title = "Create Orders";
    Layout = "_Layout";

}

<h2>Create New Orders</h2>


@Html.AntiForgeryToken()
<div class="order-tabs-container">
    @* 🗂️ TAB NAVIGATION: Bootstrap tabs for multiple orders *@
    <ul class="nav nav-tabs" id="orderTabs" role="tablist">
        @for (int i = 0; i < Model.Orders.Count; i++)
        {
            <li class="nav-item">
                @* 📌 First tab is active by default *@
                <a href="#orderTab-@i" class="nav-link active" data-toggle="tab">
                    Order @(i + 1) @* 👥 User-friendly numbering (1, 2, 3...) *@

                    @* ❌ Close button for each tab (except can't close if only one) *@
                    <button type="button" class="close remove-order-tab" data-index="@i"
                        style="margin-left:5px;">&times;</button>
                </a>
            </li>
        }
    </ul>

    @* 📋 TAB CONTENT: Each tab contains a complete order form *@
    <div class="tab-content" id="orderTabContent">
        @for (int i = 0; i < Model.Orders.Count; i++)
        {
            <div class="tab-pane @(i == 0 ? "active show" : "")" id="orderTab-@i">

                @* 🔧 PARTIAL VIEW: Reuses single order form with unique field prefixes *@
                @* CRITICAL: HtmlFieldPrefix makes form fields like Orders[0].CustomerName, Orders[1].CustomerName *@
                
                <form asp-action="Create" method="post" class="order-form">
                    @Html.AntiForgeryToken()
                    @await Html.PartialAsync(
                        "_CreateOrderForm",
                        Model.Orders[i]
                    )             
                     @* 💾 Submits current order *@
                   
                </form>
            </div>
        }
    </div>
    <br />
    @* 🎯 ACTION BUTTONS *@
    <button type="button" id="addOrderTab" class="btn btn-success">Add Order</button>



</div>

@* 📋 JAVASCRIPT TEMPLATES: For dynamically adding new order tabs *@

<script type="text/template" id="orderTabTemplate">
    <li class="nav-item">
        <a href="#orderTab-{{index}}" data-toggle="tab" class="nav-link">
            Order {{number}}
            <button type="button" class="close remove-order-tab" data-index="{{index}}" style="margin-left:5px;">&times;</button>
        </a>
    </li>
</script>

@* 📋 JAVASCRIPT TEMPLATES: For dynamically adding new order-item rows *@
<script type="text/template" id="orderItemRowTemplate">
    <div class="order-item row" data-index="{{index}}">
        <div class="col-md-3">
            <select name="OrderItems[{{index}}].ProductId" class="form-control product-select2" style="width:100%;" required>
                <option value="">--Select Product--</option>
                @foreach (var product in ViewBag.Products as IEnumerable<ProductOptionViewModel>)
                {
                        <option value="@product.Id" data-price="@product.Price">@product.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <input type="number" name="OrderItems[{{index}}].Price" class="form-control item-price" step="0.01" min="0" placeholder="Price" required />
        </div>
        <div class="col-md-2">
            <input type="number" name="OrderItems[{{index}}].Quantity" class="form-control item-quantity" min="1" value="1" placeholder="Qty" required />
        </div>
        <div class="col-md-2">
            <input type="text" class="form-control item-total" value="$0.00" readonly tabindex="-1" />
        </div>
        <div class="col-md-1">
            <button type="button" class="btn btn-danger btn-sm remove-item"><i class="fa fa-trash">X</i></button>
        </div>
    </div>
</script>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        let itemIndex = 0;  // 🔢 Global counter for order items within each order

        $(document).ready(function () {
            // 🚀 INITIALIZATION: Add first item by default when page loads
            @* addOrderItem(); *@

                // ➕ ADD ITEM: Button click handler for adding items to current order
                $(document).on('click', '.addItem', function (e) {
                    e.preventDefault();
                    var $tab = $(this).closest('.tab-pane');
                    addOrderItem($tab); // Pass the context
                });
            // 🗑️ REMOVE ITEM: Event delegation for dynamically created elements
            $(document).on('click', '.remove-item', function () {
                e.preventDefault();
                $(this).closest('.order-item').remove();    // Remove the item panel
                var $tab = $(this).closest('.tab-pane');
                updateOrderTotal($tab);                         // Recalculate total
                updateItemIndices($tab);                        // Fix array indices for model binding
            });

            @* // 🔄 PRODUCT SELECTION: AJAX call to get product details
            $(document).on('change', '.product-select', function() {
                const productId = $(this).val();
                const $container = $(this).closest('.order-item');

                if (productId) {
                    // 📡 AJAX: Fetch product name and price from server
                    $.ajax({
                        url: '@Url.Action("GetProductDetails", "Order")',   // Server endpoint
                        type: 'POST',
                        data: { productId: productId },
                        success: function(response) {
                            if (response.success) {
                                // ✅ Auto-fill product name and price
                                $container.find('.product-name').val(response.name);
                                $container.find('.item-price').val(response.price);
                                updateItemTotal($container);
                            }
                        }
                    });
                }
            }); *@



                // 🔢 CALCULATION: Live calculation when price or quantity changes
                $(document).on('input', '.item-price, .item-quantity', function () {
                    var $row = $(this).closest('.order-item');
                    var $tab = $(this).closest('.tab-pane, .order-form-content');
                    var price = parseFloat($row.find('.item-price').val()) || 0;
                    var qty = parseInt($row.find('.item-quantity').val()) || 0;
                    var total = price * qty;
                    $row.find('.item-total').val('$' + total.toFixed(2));
                    updateOrderTotal($tab);

                });
        });

        // ➕ FUNCTION: Add new order item-row to the form
        function addOrderItem($tab) {
            
            // Find the closest parent tab-pane to determine which tab the button was clicked in
            $tab = $tab || $('.tab-pane.active');

            

            // Find the container where order item rows are stored within this tab
            var $orderItems = $tab.find('.orderItems');
            // Create the orderItems container if it doesn't exist
            if ($orderItems.length === 0) {
                $tab.find('form').prepend('<div class="orderItems"></div>');
                $orderItems = $tab.find('.orderItems');
            }

            var orderItemIndex = $orderItems.find('.order-item.row').length; // Get current item count in this tab

            // Replace ALL instances of {{index}} in the template
            var template = $('#orderItemRowTemplate').html()
                .replace(/{{index}}/g, orderItemIndex);
            // Convert the template string into a jQuery object for manipulation
            var $row = $(template);
            $orderItems.append($row);

            // Initialize the Select2 dropdown for the product selector in the new row
            initProductSelect2($row.find('.product-select2')); // When adding a new order item row, initialize Select2

            // Update totals
            updateItemIndices($tab);
            updateOrderTotal($tab);

            return false; // Prevent form submission if called from a button
        }
        // 🔄 PRODUCT SELECT2: Initialize Select2 for product dropdowns
        function initProductSelect2($select) {
            
            // Initialize the Select2 plugin on the given select element
            $select.select2({
                placeholder: 'Select Product...',
                allowClear: true,
            });


            // When a product is selected from the dropdown
            // On product select, fetch price and set it
            $select.on('select2:select', function (e) {
                var $row = $select.closest('.order-item');

                var price = $select.find('option:selected').data('price'); // Get price from data attribute
                
                $row.find('.item-price').val(price).trigger('input'); // Set price and trigger input event for calculation

                $tab = $(this).closest('.tab-pane');
                console.log('tab:', $tab.attr('id')); // Debugging log
                updateOrderTotal($tab); // Update order total after setting price
                updateItemIndices($tab); // Update indices for model binding
            });
        }
        // Also initialize for any existing rows on page load
        $(function () {
            $('.product-select2').each(function () {
                initProductSelect2($(this));
            });
        });

        // 💰 FUNCTION: Calculate total for a specific item (Price × Quantity)
        //function updateItemTotal($container) {
        //    const price = parseFloat($container.find('.item-price').val()) || 0;
        //    const quantity = parseInt($container.find('.item-quantity').val()) || 0;
        //    const total = price * quantity;

        //    $container.find('.item-total').text('$' + total.toFixed(2));    // Display item total
        //    updateOrderTotal($container);     // Update overall order total
        //}

        // 💰 FUNCTION: Calculate total price of the whole order
        function updateOrderTotal($tab) {
            // Find the closest parent tab-pane to determine which tab the button was clicked in
            $tab = $tab || $('.tab-pane.active');

            
            $orderItems = $tab.find('.orderItems');
            
            let total = 0;
            $orderItems.find('.item-total').each(function () {
                const itemTotal = parseFloat($(this).val().replace('$', '')) || 0;
                total += itemTotal;
            });
            $('.orderTotal').text(total.toFixed(2));                // Display in UI
        }

        // 🔧 FUNCTION: Fix array indices after item removal for proper model binding
        function updateItemIndices($tab) {
            // Loop through each .order-item row in the DOM (should be scoped to $tab for better accuracy)
            $('.order-item').each(function (index) {
                // Set a data attribute with the current index for each row
                $(this).attr('data-index', index);

                // 🔄 Update name attributes: OrderItems[0].ProductId, OrderItems[1].ProductId, etc.
                // Example: changes OrderItems[2].ProductId to OrderItems[0].ProductId, etc.
                $(this).find('input, select').each(function () {
                    const name = $(this).attr('name');
                    if (name) {
                        // Replace the index in square brackets with the new index
                        const newName = name.replace(/\[\d+\]/, '[' + index + ']');
                        $(this).attr('name', newName);
                    }
                });
            });
            // Update the global itemIndex variable to match the current number of order-item rows
            itemIndex = $('.order-item').length;    // Reset counter to current item count
        }

        // 🔧 FUNCTION: Disbale Table ID if Type of Order is not 2
        function toggleTableDropdown($tab) {
            var type = parseInt($tab.find('#TypeOfOrder').val(), 10);
            console.log('TypeOfOrder:', type); // Debugging log
            // Disable TableId if TypeOfOrder is not 2
            if (type != 2 ) {
                $tab.find('#TableId').prop('disabled', true).val('');
            } else {
                $tab.find('#TableId').prop('disabled', false);
            }
        }

        $(document).on('change','.TypeOfOrder', function() {
            var $tab = $(this).closest('.tab-pane');
            toggleTableDropdown($tab);
        });

        toggleTableDropdown($(document)); // Initial call on page load

    </script>

    @* 🗂️ TAB MANAGEMENT SCRIPT: Handles adding/removing order tabs *@
    <script>
        var orderIndex = @Model.Orders.Count;   // 🔢 Track total number of orders
        $(function () {

            // ➕ ADD NEW ORDER TAB: Creates new tab and form
            $('#addOrderTab').click(function () {

                var currentIndex = orderIndex;
                var tabNumber = currentIndex + 1;

                // 🗂️ Create new tab navigation
                var tabHtml = $('#orderTabTemplate').html()
                    .replace(/{{index}}/g, currentIndex)              // Internal index for IDs
                    .replace(/{{number}}/g, tabNumber);             // Display number for users
                $('#orderTabs').append(tabHtml);

                // 📋 Create new tab content (form)
                // AJAX: Load the partial view for the new order form
                $.get('@Url.Action("OrderFormPartial", "Order")', { index: currentIndex }, function (formHtml) {
                    var tabPane = $('<div class="tab-pane" id="orderTab-' + currentIndex + '"></div>').html(formHtml);
                    $('#orderTabContent').append(tabPane);

                    // Activate the newly created tab
                    $('#orderTabs li:last-child a').tab('show');

                    //Initialize table dropdown for the new tab
                    var $tab = $('#orderTabContent .tab-pane:last');
                    toggleTableDropdown($tab);

                });    
                orderIndex++;         //  Increment for next order
            });

            // ❌ REMOVE ORDER TAB: Handles tab deletion
            $(document).on('click', '.remove-order-tab', function (e) {
                e.stopPropagation();                // Prevent tab activation when clicking close button
                var index = $(this).data('index');

                // 🗑️ Remove both tab navigation and content
                $('#orderTabs li').has('a[href="#orderTab-' + index + '"]').remove();
                $('#orderTab-' + index).remove();

                // 🎯 If removed tab was active, activate first remaining tab
                if ($('#orderTabs li .nav-link.active').length === 0  && $('#orderTabs li').length > 0) {
                    $('#orderTabs li:last-child a').tab('show');
                }
            });

            // SWITCH BETWEEN TABS
            $(document).on('click', '#orderTabs .nav-link', function (e) {

                e.preventDefault(); // Prevent the default anchor behavior (which would jump to the href target).

                //Bootstrap API tab switching
                $(this).tab('show');
            });


        });



        // SUBMIT CURRENT ORDER FORM
        $(document).on('submit', '.order-form', function (e) {
            e.preventDefault();         // Prevent the default form submission (which would reload the page).

            var $form = $(this);        // Reference to the form being submitted.

            // Send the form data to the server using AJAX.
            $.ajax({
                url: $form.attr('action'),      // The URL to POST to (taken from the form's 'action' attribute).
                type: 'POST',
                data: $form.serialize(),
                success: function (result) {
                    @* alert($form.data('success-message') || 'Order created successfully!'); *@
                    if (result.success) {
                        alert(result.message);
                        // Optionally redirect or update UI
                    } else {
                        alert(result.message);
                        if (result.errors) {
                            console.log('Validation errors:', result.errors);
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                       console.log('AJAX error details:');
                    console.log('Status:', textStatus);
                    console.log('Error Thrown:', errorThrown);
                    console.log('Response Text:', jqXHR.responseText);

                    alert($form.data('error-message') || 'An error occurred while creating the order.');
                }
            });
        });

    </script>
}
