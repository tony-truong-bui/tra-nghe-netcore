@{
    Layout = "_Layout";
    ViewBag.Title = "Login";
}

<h2>Login</h2>
@*
    HTML Form generation using Razor syntax
    Creates a POST form that submits to AccountController.Login action
    Html.BeginForm() generates proper <form> tags with routing
*@
@using (Html.BeginForm("Login", "Account", FormMethod.Post))
{
    @*
        CSRF Protection Token
        Generates hidden field with anti-forgery token to prevent cross-site request forgery attacks
        Must match [ValidateAntiForgeryToken] attribute in controller
    *@
    @Html.AntiForgeryToken()
    <div class="form-group">
        @Html.Label("Email")
        @Html.TextBox("email", null, new
   {
       @class = "form-control",
       type = "email",              // HTML5 email input type (built-in validation)
       required = "required"        // HTML5 required attribute (client-side validation)
   })
    </div>
    <div class="form-group">
        @Html.Label("Password")
        @Html.Password("password", null, new
        {
           @class = "form-control",
           required = "required"
        })
        @* Note: Html.Password() automatically creates input type="password" *@
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
}

@*
    Error Display Section
    Shows validation errors if login fails
    Checks ModelState validity and displays all error messages
*@
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @*
        Loop through all ModelState errors
        SelectMany flattens nested collections of errors from different fields
        *@
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div>@error.ErrorMessage</div>
            <div>So sorry!!</div>
        }
    </div>
}


