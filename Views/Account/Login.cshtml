@{
    Layout = "_Layout";
    ViewBag.Title = "Login";
    ViewData["Title"] = "Login";
}

<h1 class="text-center">Please sign in</h1>
@*
    HTML Form generation using Razor syntax
    Creates a POST form that submits to AccountController.Login action
    Html.BeginForm() generates proper <form> tags with routing
*@
@using (Html.BeginForm("Login", "Account", FormMethod.Post, new { @class = "form-horizontal w-25 mx-auto" }))
{
    @*
        CSRF Protection Token
        Generates hidden field with anti-forgery token to prevent cross-site request forgery attacks
        Must match [ValidateAntiForgeryToken] attribute in controller
    *@
    @Html.AntiForgeryToken()
    <div class="form-group">

        @Html.Label("Email",null, new { @class = "fs-5" })
        <div class="form-floating">
            @Html.TextBox("email", null, new
            {
                @class = "form-control", // Bootstrap class for styling
                type = "email", // HTML5 email input type (built-in validation)
                required = "required", // HTML5 required attribute (client-side validation)
                
                })
    </div>
</div>
<div class="form-group mt-3">
    @Html.Label("Password",null,new { @class = "fs-5" })
    <div class="form-floating">
        @Html.Password("password", null, new
                {
                @class = "form-control",
                required = "required",
                
                })
        @* Note: Html.Password() automatically creates input type="password" *@
    </div>
</div>

<div class="g-recaptcha mt-3" data-sitekey="@ViewBag.ReCaptchaSiteKey"></div>
<button type="submit" class="btn btn-primary w-100 py-2 mt-3"><span class="fs-5">Login</span></button>
}

@*
    Error Display Section
    Shows validation errors if login fails
    Checks ModelState validity and displays all error messages
*@
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @*
        Loop through all ModelState errors
        SelectMany flattens nested collections of errors from different fields
        *@
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div>@error.ErrorMessage</div>
            <div>So sorry!!</div>
        }
    </div>
}


@section Scripts {
    @* 
        Include reCAPTCHA script
        This is required for the reCAPTCHA widget to function
        The sitekey is passed from the controller via ViewBag
    *@
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    
    @* 
        Custom script to handle form submission and reCAPTCHA validation
        Ensures reCAPTCHA is validated before form submission
    *@
    <script>
        $(document).ready(function () {
            $('form').submit(function (e) {
                if (grecaptcha.getResponse() == '') {
                    e.preventDefault();
                    alert('Please complete the reCAPTCHA');
                }
            });
        });
    </script>
}
